// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: load/load.proto

package load

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/micro-in-cn/platform-web/assembly-line/protobuf/go/basic"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LoadService service

type LoadService interface {
	PushLoadAvgStat(ctx context.Context, in *LoadRequest, opts ...client.CallOption) (*LoadResponse, error)
}

type loadService struct {
	c    client.Client
	name string
}

func NewLoadService(name string, c client.Client) LoadService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "protobuf.pb.load"
	}
	return &loadService{
		c:    c,
		name: name,
	}
}

func (c *loadService) PushLoadAvgStat(ctx context.Context, in *LoadRequest, opts ...client.CallOption) (*LoadResponse, error) {
	req := c.c.NewRequest(c.name, "LoadService.PushLoadAvgStat", in)
	out := new(LoadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoadService service

type LoadServiceHandler interface {
	PushLoadAvgStat(context.Context, *LoadRequest, *LoadResponse) error
}

func RegisterLoadServiceHandler(s server.Server, hdlr LoadServiceHandler, opts ...server.HandlerOption) error {
	type loadService interface {
		PushLoadAvgStat(ctx context.Context, in *LoadRequest, out *LoadResponse) error
	}
	type LoadService struct {
		loadService
	}
	h := &loadServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LoadService{h}, opts...))
}

type loadServiceHandler struct {
	LoadServiceHandler
}

func (h *loadServiceHandler) PushLoadAvgStat(ctx context.Context, in *LoadRequest, out *LoadResponse) error {
	return h.LoadServiceHandler.PushLoadAvgStat(ctx, in, out)
}
