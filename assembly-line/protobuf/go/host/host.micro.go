// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: host/host.proto

package host

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/micro-in-cn/platform-web/assembly-line/protobuf/go/basic"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HostService service

type HostService interface {
	PushHostInfo(ctx context.Context, in *HostRequest, opts ...client.CallOption) (*HostResponse, error)
}

type hostService struct {
	c    client.Client
	name string
}

func NewHostService(name string, c client.Client) HostService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "protobuf.pb.host"
	}
	return &hostService{
		c:    c,
		name: name,
	}
}

func (c *hostService) PushHostInfo(ctx context.Context, in *HostRequest, opts ...client.CallOption) (*HostResponse, error) {
	req := c.c.NewRequest(c.name, "HostService.PushHostInfo", in)
	out := new(HostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HostService service

type HostServiceHandler interface {
	PushHostInfo(context.Context, *HostRequest, *HostResponse) error
}

func RegisterHostServiceHandler(s server.Server, hdlr HostServiceHandler, opts ...server.HandlerOption) error {
	type hostService interface {
		PushHostInfo(ctx context.Context, in *HostRequest, out *HostResponse) error
	}
	type HostService struct {
		hostService
	}
	h := &hostServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HostService{h}, opts...))
}

type hostServiceHandler struct {
	HostServiceHandler
}

func (h *hostServiceHandler) PushHostInfo(ctx context.Context, in *HostRequest, out *HostResponse) error {
	return h.HostServiceHandler.PushHostInfo(ctx, in, out)
}
