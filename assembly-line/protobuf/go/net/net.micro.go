// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: net/net.proto

package net

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/micro-in-cn/platform-web/assembly-line/protobuf/go/basic"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for NetService service

type NetService interface {
	PushIOCountersStat(ctx context.Context, in *NetRequest, opts ...client.CallOption) (*NetResponse, error)
	PushConnectionStat(ctx context.Context, in *NetRequest, opts ...client.CallOption) (*NetResponse, error)
}

type netService struct {
	c    client.Client
	name string
}

func NewNetService(name string, c client.Client) NetService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "protobuf.pb.net.net"
	}
	return &netService{
		c:    c,
		name: name,
	}
}

func (c *netService) PushIOCountersStat(ctx context.Context, in *NetRequest, opts ...client.CallOption) (*NetResponse, error) {
	req := c.c.NewRequest(c.name, "NetService.PushIOCountersStat", in)
	out := new(NetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netService) PushConnectionStat(ctx context.Context, in *NetRequest, opts ...client.CallOption) (*NetResponse, error) {
	req := c.c.NewRequest(c.name, "NetService.PushConnectionStat", in)
	out := new(NetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetService service

type NetServiceHandler interface {
	PushIOCountersStat(context.Context, *NetRequest, *NetResponse) error
	PushConnectionStat(context.Context, *NetRequest, *NetResponse) error
}

func RegisterNetServiceHandler(s server.Server, hdlr NetServiceHandler, opts ...server.HandlerOption) error {
	type netService interface {
		PushIOCountersStat(ctx context.Context, in *NetRequest, out *NetResponse) error
		PushConnectionStat(ctx context.Context, in *NetRequest, out *NetResponse) error
	}
	type NetService struct {
		netService
	}
	h := &netServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&NetService{h}, opts...))
}

type netServiceHandler struct {
	NetServiceHandler
}

func (h *netServiceHandler) PushIOCountersStat(ctx context.Context, in *NetRequest, out *NetResponse) error {
	return h.NetServiceHandler.PushIOCountersStat(ctx, in, out)
}

func (h *netServiceHandler) PushConnectionStat(ctx context.Context, in *NetRequest, out *NetResponse) error {
	return h.NetServiceHandler.PushConnectionStat(ctx, in, out)
}
